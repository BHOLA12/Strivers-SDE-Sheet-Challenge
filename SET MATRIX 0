class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
       set<int>mp;
        int row =  matrix.size();
int cols = matrix[0].size(); 
       for(int i=0;i<row;i++){
           for(int j=0;j<cols;j++){
               if(matrix[i][j]==0){
                   rows[i]=0;
                   columns[j]=0;
               }
           }
       }
      for(auto x:rows){
          cout<<x.first<<" "<<x.second<<endl;
          int rw=x.first;
          for(int i=0;i<cols;i++){
              matrix[rw][i]=0;
          }
      }
       for(auto y:columns){
          cout<<y.first<<" "<<y.second<<endl;
          int col1=y.first;
          for(int i=0;i<row;i++){
              matrix[i][col1]=0;
          }
      }
      

      // cout<<row<<cols;
    }
};
optimized code in space complexicity in o(1)
  class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int row =  matrix.size();
int cols = matrix[0].size(); 
bool checkingrow=false;
bool checkingcolumn=false;
for(int i=0;i<cols;i++){
    if(matrix[0][i]==0){
        checkingrow=true;
        break;
    }
}
for(int i=0;i<row;i++){
    if(matrix[i][0]==0){
        checkingcolumn=true;
        break;
    }
}
for(int i=0;i<row;i++){
    for(int j=0;j<cols;j++){
        if(matrix[i][j]==0){
          
            matrix[0][j]=0;
            matrix[i][0]=0;
        }
    }
}
//making row 0
for(int i=1;i<row;i++){
    if(matrix[i][0]==0){
   for(int j=1;j<cols;j++){
    matrix[i][j]=0;
    }
    }
}
    
    for(int j=1;j<cols;j++){
    if(matrix[0][j]==0){
   for(int i=1;i<row;i++){
    matrix[i][j]=0;
    }
    }
    }
     if(checkingrow){
         for(int i=0;i<cols;i++){
             matrix[0][i]=0;
         }
     }   
  if(checkingcolumn){
         for(int i=0;i<row;i++){
             matrix[i][0]=0;
         }
     }   

      // cout<<row<<cols;
    }
};
